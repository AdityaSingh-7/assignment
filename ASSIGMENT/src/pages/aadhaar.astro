---
import MainLayout from "../layouts/MainLayout.astro";
import Nav from "../components/Nav.astro";
import Tabel from "../components/Tabel.astro";
import Button from "../components/Button.astro";
import FormLayout from '../layouts/FormLayout.astro';

const fields = [
  { id: 'doc-number', label: 'Aadhaar Number', type: 'text', name: 'documentNumber', placeholder: '1234 5678 9012', pattern: '[0-9]{12}', required: true },
  { id: 'doc-name', label: 'Name on Aadhaar', type: 'text', name: 'holdingPersonName', placeholder: 'JACK RAYN', required: true },
  { id: 'doc-dob', label: 'Date of Birth', type: 'date', name: 'DOB', required: true },
  { id: 'doc-address', label: 'Aadhaar Address', type: 'textarea', name: 'aadhaarAddress', placeholder: 'as per aadhaar', required: true }
];
const inlineStyle = `
  background-color: antiquewhite;
`;
---
<MainLayout>
  <nav slot="nav">
    <Nav />
  </nav>
  <div class="heading"><p>Please enter the details in the below form
   <p class="subheading">all feilds are required</p>
  </p>
  </div>
   <section>
     <FormLayout formId="aadhaar" formName="aadhaar" fields={fields} genderLabel="Gender" style={inlineStyle} />
    <Button />
   </section>
   <Tabel />
   <div id="canvasContainer" class="canvas" style="display: none;">
    <canvas id="aadhaarCanvas"></canvas>
    <button id="downloadButton" class="download" style="display: none;">Download Image</button>
</div>
</MainLayout>
<script is:inline type="module">
   
import { generateImage } from "/scripts/image.js";

   const aadhaarForm = document.getElementById("aadhaar");
   const saveButton = document.querySelector(".save__button");
   const resetButton = document.querySelector(".reset__button");
   const container = document.querySelector(".container");
   const canvas = document.getElementById("aadhaarCanvas");
   const context = canvas ? canvas.getContext("2d") : null;
   let entryCount = 0;
   let currentEditItem = null;

   if (!context) {
     console.error("Canvas context could not be obtained.");
   } else {
     const handleSubmit = (event) => {
       event.preventDefault();

       const formData = new FormData(aadhaarForm);
       const documentNumber = formData.get("documentNumber")?.trim();
       const holdingPersonName = formData.get("holdingPersonName")?.trim();
       const DOB = formData.get("DOB")?.trim();
       const gender = formData.get("gender");
       const aadhaarAddress = formData.get("aadhaarAddress")?.trim();

       if (documentNumber && holdingPersonName && DOB) {
         if (currentEditItem) {
           updateEntry(
             currentEditItem,
             documentNumber,
             holdingPersonName,
             DOB,
             gender,
             aadhaarAddress
           );
         } else {
           createNewEntry(
             documentNumber,
             holdingPersonName,
             DOB,
             gender,
             aadhaarAddress
           );
         }
         resetForm();
       } else {
         console.log("Please fill in all required fields.");
       }
     };

     const createNewEntry = (
       documentNumber,
       holdingPersonName,
       DOB,
       gender,
       aadhaarAddress
     ) => {
       entryCount++;
       const maleSymbol = String.fromCharCode(0x2642);
       const femaleSymbol = String.fromCharCode(0x2640);
       const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

       container.insertAdjacentHTML(
         "beforeend",
         `
         <div class="item" data-entry-id="${entryCount}" 
                           data-document-number="${documentNumber}" 
                           data-holding-person-name="${holdingPersonName}" 
                           data-dob="${formatDate(DOB)}" 
                           data-gender="${gender}" 
                           data-aadhaar-address="${aadhaarAddress}">
             <div>${entryCount}</div>
             <div>Aadhaar</div>
             <div>${documentNumber}</div>
             <div>${holdingPersonName}</div>
             <div>${genderSymbol}</div>
             <div>${formatDate(DOB)}</div>
             <div>
                 <button class="viewbtn" type="button">View</button>
                 <button class="editbtn" type="button">Edit</button>
                 <button class="deletebtn" type="button">Delete</button>
             </div>
         </div>
         `
       );
     };

     const updateEntry = (
       item,
       documentNumber,
       holdingPersonName,
       DOB,
       gender,
       aadhaarAddress
     ) => {
       const maleSymbol = String.fromCharCode(0x2642);
       const femaleSymbol = String.fromCharCode(0x2640);
       const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

       item.dataset.documentNumber = documentNumber;
       item.dataset.holdingPersonName = holdingPersonName;
       item.dataset.dob = formatDate(DOB);
       item.dataset.gender = gender;
       item.dataset.aadhaarAddress = aadhaarAddress;

      const divs = item.querySelectorAll('div');
      divs[2].textContent = documentNumber;
      divs[3].textContent = holdingPersonName;
      divs[4].textContent = genderSymbol;
      divs[5].textContent = formatDate(DOB);

       currentEditItem = null;
     };

     const resetForm = () => {
       aadhaarForm.reset();
       currentEditItem = null;
     };

     const deleteItem = (event) => {
       const item = event.target.closest(".item");
       item.remove();
     };

     const editItem = (event) => {
       const item = event.target.closest(".item");

       const documentNumber = item.dataset.documentNumber;
       const holdingPersonName = item.dataset.holdingPersonName;
       const gender = item.dataset.gender;
       const DOB = item.dataset.dob;
       const aadhaarAddress = item.dataset.aadhaarAddress;

       aadhaarForm.querySelector("#doc-number").value = documentNumber;
       aadhaarForm.querySelector("#doc-name").value = holdingPersonName;
       aadhaarForm.querySelector("#doc-dob").value = convertToDateInputFormat(DOB);
       aadhaarForm.querySelector(`#gender_${gender}`).checked = true;
       aadhaarForm.querySelector("#doc-address").value = aadhaarAddress;

       currentEditItem = item;
     };

     const viewItem = (event) => {
       const item = event.target.closest(".item");

       const documentNumber = item.dataset.documentNumber;
       const holdingPersonName = item.dataset.holdingPersonName;
       const genderSymbol = item.dataset.gender === "male" ? String.fromCharCode(0x2642) : String.fromCharCode(0x2640);
       const DOB = item.dataset.dob;
       const aadhaarAddress = item.dataset.aadhaarAddress;

       generateAadhaarImage(documentNumber, holdingPersonName, genderSymbol, DOB, aadhaarAddress);
     };

     function generateAadhaarImage(documentNumber, holdingPersonName, genderSymbol, DOB,aadhaarAddress ) {
       const details = [
         { label: " Number:", value: documentNumber },
         { label: " Name:", value: holdingPersonName },
         {
           label: " Gender:",
           value: genderSymbol === String.fromCharCode(0x2642) ? "Male" : "Female",
         },
         { label: " Dateofbirth:", value: DOB },
         { label: " Address:", value: aadhaarAddress },
       ];

       generateImage({
         title: "--Aadhaar Card--",
         details: details,
         canvas: document.getElementById("aadhaarCanvas"),
         canvasContainer: document.getElementById("canvasContainer"),
         downloadButton: document.getElementById("downloadButton"),
         backgroundColor: "#D8BFD8"
       });
     }

     const formatDate = (date) => {
       if (!date) return "";
       const [year, month, day] = date.split("-");
       return `${day}/${month}/${year}`;
     };

        const convertToDateInputFormat = (date) => {
       if (!date) return "";
       const [day, month, year] = date.split("/");
       return `${year}-${month}-${day}`;
     };

     if (resetButton) {
       resetButton.addEventListener("click", resetForm);
     } else {
       console.error("Reset button not found");
     }

     if (saveButton) {
       saveButton.addEventListener("click", handleSubmit);
     } else {
       console.error("Save button not found");
     }

     container.addEventListener("click", (event) => {
       if (event.target.classList.contains("deletebtn")) {
         deleteItem(event);
       } else if (event.target.classList.contains("editbtn")) {
         editItem(event);
       } else if (event.target.classList.contains("viewbtn")) {
         viewItem(event);
       }
     });

     const navLinks = document.querySelectorAll('.nav-item');
     const currentPath = window.location.pathname;
     navLinks.forEach(link => {
         if (link.getAttribute('href') === currentPath) {
             link.classList.add('active');
         }
     });
   }
</script>
