---
import MainLayout from "../layouts/MainLayout.astro";
import Nav from "../components/Nav.astro";
import Button from "../components/Button.astro";
import Tabel from "../components/Tabel.astro";
import FormLayout from '../layouts/FormLayout.astro';

const fields = [
  { id: 'doc-number', label: 'Id Number', type: 'text', name: 'documentNumber', placeholder: 'D123 4567 8901 234', required: true },
  { id: 'doc-name', label: 'Name on Id', type: 'text', name: 'holdingPersonName', placeholder: 'ZEN RAYN', required: true },
  { id: 'doc-fathername', label: 'Father Name', type: 'text', name: 'fathername', placeholder: 'ZEN RAY', required: true },
  { id: 'doc-dob', label: 'Date of Birth', type: 'date', name: 'DOB', required: true }
];
const inlineStyle = `
   background-color: rgb(219, 220, 249);
`;
---

<MainLayout>
  <nav slot="nav">
    <Nav />
  </nav>
  <div class="heading">
    <p>
      Please enter the details in the below form
      <p class="subheading">all feilds are required</p>
    </p>
    <section>
    <FormLayout formId="voter" formName="voter" fields={fields} genderLabel="Gender" style={inlineStyle} />

      <Button />
    </section>

    <Tabel />
    <div id="canvasContainer" class="canvas" style="display: none;">
      <canvas id="voterCanvas"></canvas>
      <button id="downloadButton" class="download" style="display: none;"
        >Download Image</button
      >
    </div>
  </div>
  <script is:inline type="module">
     import { generateImage } from "/scripts/image.js";

    const voterForm = document.querySelector(".form");
    const saveButton = document.querySelector(".save__button");
    const resetButton = document.querySelector(".reset__button");
    const container = document.querySelector(".container");
    const canvas = document.getElementById("voterCanvas");
    const context = canvas.getContext("2d");

    let entryCount = 0;
    let currentEditItem = null;

    const handleSubmit = (event) => {
      event.preventDefault();

      const documentNumber = voterForm
        .querySelector("#doc-number")
        .value.trim();
      const holdingPersonName = voterForm
        .querySelector("#doc-name")
        .value.trim();
      const fathername = voterForm
        .querySelector("#doc-fathername")
        .value.trim();
      const DOB = voterForm.querySelector("#doc-dob").value.trim();
      const gender = voterForm.querySelector(
        'input[name="gender"]:checked'
      ).value;

      if (documentNumber && holdingPersonName && DOB && fathername) {
        if (currentEditItem) {
          updateEntry(
            currentEditItem,
            documentNumber,
            holdingPersonName,
            fathername,
            DOB,
            gender
          );
        } else {
          createNewEntry(
            documentNumber,
            holdingPersonName,
            fathername,
            DOB,
            gender
          );
        }
        resetForm();
      } else {
        console.log("Please fill in all required fields.");
      }
    };

    const createNewEntry = (
      documentNumber,
      holdingPersonName,
      fathername,
      DOB,
      gender
    ) => {
      entryCount++;
      const maleSymbol = String.fromCharCode(0x2642);
      const femaleSymbol = String.fromCharCode(0x2640);
      const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

      container.insertAdjacentHTML(
        "beforeend",
        `
        <div class="item" data-entry-id="${entryCount}" data-address="${fathername}">
          <div>${entryCount}</div>
          <div>Voter ID</div>
          <div>${documentNumber}</div>
          <div>${holdingPersonName}</div>
          <div>${genderSymbol}</div>
          <div>${formatDate(DOB)}</div>
          <div>
            <button class="viewbtn" type="button">View</button>
            <button class="editbtn" type="button">Edit</button>
            <button class="deletebtn" type="button">Delete</button>
          </div>
        </div>
      `
      );
    };

    const updateEntry = (
      item,
      documentNumber,
      holdingPersonName,
      fathername,
      DOB,
      gender
    ) => {
      const maleSymbol = String.fromCharCode(0x2642);
      const femaleSymbol = String.fromCharCode(0x2640);
      const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

      item.querySelector("div:nth-child(3)").textContent = documentNumber;
      item.querySelector("div:nth-child(4)").textContent = holdingPersonName;
      item.querySelector("div:nth-child(5)").textContent = genderSymbol;
      item.querySelector("div:nth-child(6)").textContent = formatDate(DOB);
      item.setAttribute("data-address", fathername);

      currentEditItem = null;
    };

    const resetForm = () => {
      voterForm.reset();
      currentEditItem = null;
    };

    const deleteItem = (event) => {
      const item = event.target.closest(".item");
      item.remove();
    };

    const editItem = (event) => {
      const item = event.target.closest(".item");
      const documentNumber = item
        .querySelector("div:nth-child(3)")
        .textContent.trim();
      const holdingPersonName = item
        .querySelector("div:nth-child(4)")
        .textContent.trim();
      const genderSymbol = item
        .querySelector("div:nth-child(5)")
        .textContent.trim();
      const DOB = item.querySelector("div:nth-child(6)").textContent.trim();
      const fathername = item.getAttribute("data-address").trim();

      const maleSymbol = String.fromCharCode(0x2642);
      const gender = genderSymbol === maleSymbol ? "male" : "female";

      voterForm.querySelector("#doc-number").value = documentNumber;
      voterForm.querySelector("#doc-name").value = holdingPersonName;
      voterForm.querySelector(`#gender_${gender}`).checked = true;
      voterForm.querySelector("#doc-fathername").value = fathername;

      const [year, month, day] = DOB.split("/");
      voterForm.querySelector("#doc-dob").value = `${day}-${month}-${year}`;

      currentEditItem = item;
    };

    const viewItem = (event) => {
      const item = event.target.closest(".item");
      const documentNumber = item
        .querySelector("div:nth-child(3)")
        .textContent.trim();
      const holdingPersonName = item
        .querySelector("div:nth-child(4)")
        .textContent.trim();
      const genderSymbol = item
        .querySelector("div:nth-child(5)")
        .textContent.trim();
      const DOB = item.querySelector("div:nth-child(6)").textContent.trim();
      const fathername = item.dataset.address.trim();

      generateVoterImage(
        documentNumber,
        holdingPersonName,
        genderSymbol,
        DOB,
        fathername
      );
    };

   function generateVoterImage(
        documentNumber,
        holdingPersonName,
        genderSymbol,
        DOB,
        fathername
      ) {
      const details = [
        { label: "ID Number:", value: documentNumber },
        { label: "Name:", value: holdingPersonName },
        { label: "Gender:", value: genderSymbol === "â™‚" ? "Male" : "Female" },
        { label: "DOB:", value: DOB },
        { label: "Father's Name:", value: fathername },
      ];

        generateImage({
          title: "--Voter Card--",
          details: details,
          canvas: document.getElementById("voterCanvas"),
          canvasContainer: document.getElementById("canvasContainer"),
          downloadButton: document.getElementById("downloadButton"),
          backgroundColor: "#fff",
        });
      }
    const formatDate = (date) => {
      if (!date) return "";
      const [year, month, day] = date.split("-");
      return `${day}/${month}/${year}`;
    };

    resetButton.addEventListener("click", resetForm);
    saveButton.addEventListener("click", handleSubmit);
    container.addEventListener("click", (event) => {
      if (event.target.classList.contains("deletebtn")) {
        deleteItem(event);
      } else if (event.target.classList.contains("editbtn")) {
        editItem(event);
      } else if (event.target.classList.contains("viewbtn")) {
        viewItem(event);
      }
    });
    const navLinks = document.querySelectorAll('.nav-item');
    const currentPath = window.location.pathname;

    navLinks.forEach(link => {
        if (link.getAttribute('href') === currentPath) {
            link.classList.add('active');
        }
    });

  </script>
</MainLayout>
