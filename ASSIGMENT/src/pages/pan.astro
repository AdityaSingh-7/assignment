---
import MainLayout from '../layouts/MainLayout.astro';
import Nav from '../components/Nav.astro';
---

<MainLayout>
    <nav slot="nav">
        <Nav />
    </nav>
    <label for="documentType" class="dev">Document Pan</label>
    <h3>Please enter the details in below form</h3>
    <p class="tit">*all feilds are required</p>
    <section>
        <form class="panForm">
            <div id="documentFields">
                <div class='formContainerpan' id='pan'>
                    <div>
                        <label for="documentNumber_pan" class="num"> Pan Number</label>
                        <input type="text" class="s" id="documentNumber_pan" name="documentNumber" placeholder="as mentioned in pan" required>
                        </div>
                        <div>
                        <label for="holdingPersonName_pan" class="nam"> Name on  Pan</label>
                        <input type="text" id="holdingPersonName_pan" name="holdingPersonName" placeholder="as mentioned in pan" required>
                        </div>
                        <div>
                        <label for="DOB_pan" class="dob">Date of Birth</label>
                        <input type="date" id="DOB_pan" name="DOB" required>
                        </div>
                        <div>
                        <label for="panAddress" class="add"> Pan Address</label>
                        <textarea id="panAddress" name="aadhaarAddress" placeholder="as mentioned in pan" required></textarea>
                        </div>
                        <div class="gendercontainer">
                            <label for="gender" class="gen">Gender</label>
                            <div class="g">
                              <input type="radio" id="gender_male" name="gender" value="male" required checked>
                              <label for="gender_male">Male</label>
                              <input type="radio" id="gender_female" name="gender" value="female" required>
                              <label for="gender_female">Female</label>
                            </div>
                          </div>
                      </div>
                                                              
                    </div>
                </div>
            </div>
        </form>

        <div class="buttoncontainer">
            <button type="button" class="resetButton">Reset</button>
            <button type="submit" class="saveButton">Save</button>
        </div>
    </section>
    <div class="container">
        <div class="item header">
            <div>#</div>
            <div>Document</div>
            <div>Info</div>
            <div>Name</div>
            <div>Gender</div>
            <div>DOB</div>
            <div>Actions</div>
        </div>
    </div>
    <div id="canvasContainer" style="display: none;">
        <canvas id="panCanvas"></canvas>
        <button id="downloadButton" style="display: none;">Download Image</button>
    </div>

    <script is:inline>
        const panForm = document.querySelector(".panForm");
        const saveButton = document.querySelector(".saveButton");
        const resetButton = document.querySelector(".resetButton");
        const container = document.querySelector(".container");
        const canvasContainer = document.getElementById("canvasContainer");
        const downloadButton = document.getElementById("downloadButton");
        const canvas = document.getElementById('panCanvas');
        const context = canvas ? canvas.getContext('2d') : null;
        let entryCount = 0;
        let currentEditItem = null;

        const handleSubmit = (event) => {
            event.preventDefault();
            const documentNumber = panForm.querySelector("#documentNumber_pan").value.trim();
            const holdingPersonName = panForm.querySelector("#holdingPersonName_pan").value.trim();
            const DOB = panForm.querySelector("#DOB_pan").value.trim();
            const gender = panForm.querySelector('input[name="gender"]:checked').value;
            const address = panForm.querySelector("#panAddress").value.trim(); 

            if (documentNumber && holdingPersonName && DOB) {
                if (currentEditItem) {
                    updateEntry(currentEditItem, documentNumber, holdingPersonName, DOB, gender, address);
                } else {
                    createNewEntry(documentNumber, holdingPersonName, DOB, gender, address);
                }
                resetForm();
            } else {
                console.log("Please fill in all required fields.");
            }
        };

        const createNewEntry = (documentNumber, holdingPersonName, DOB, gender, address) => {
            entryCount++;
            const maleSymbol = String.fromCharCode(0x2642);
            const femaleSymbol = String.fromCharCode(0x2640);
            const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

            container.insertAdjacentHTML('beforeend', `
                <div class="item" data-entry-id="${entryCount}" data-address="${address}">
                    <div>${entryCount}</div>
                    <div>Pan</div>
                    <div>${documentNumber}</div>
                    <div>${holdingPersonName}</div>
                    <div>${genderSymbol}</div>
                    <div>${formatDate(DOB)}</div>
                    <div>
                        <button class="view-btn" type="button">View</button>
                        <button class="edit-btn" type="button">Edit</button>
                        <button class="delete-btn" type="button">Delete</button>
                    </div>
                </div>
            `);
        };

        const updateEntry = (item, documentNumber, holdingPersonName, DOB, gender, address) => {
            const maleSymbol = String.fromCharCode(0x2642);
            const femaleSymbol = String.fromCharCode(0x2640);
            const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

            item.querySelector("div:nth-child(3)").textContent = documentNumber;
            item.querySelector("div:nth-child(4)").textContent = holdingPersonName;
            item.querySelector("div:nth-child(5)").textContent = genderSymbol;
            item.querySelector("div:nth-child(6)").textContent = formatDate(DOB);
            item.setAttribute("data-address", address);

            currentEditItem = null;
        };

        const resetForm = () => {
            panForm.reset();
            currentEditItem = null;
        };

        const deleteItem = (event) => {
            const item = event.target.closest(".item");
            item.remove();
        };

        const editItem = (event) => {
            const item = event.target.closest(".item");
            const documentNumber = item.querySelector("div:nth-child(3)").textContent.trim();
            const holdingPersonName = item.querySelector("div:nth-child(4)").textContent.trim();
            const genderSymbol = item.querySelector("div:nth-child(5)").textContent.trim();
            const DOB = item.querySelector("div:nth-child(6)").textContent.trim();
            const address = item.getAttribute("data-address").trim();

            const maleSymbol = String.fromCharCode(0x2642);
            const gender = genderSymbol === maleSymbol ? "male" : "female";

            panForm.querySelector("#documentNumber_pan").value = documentNumber;
            panForm.querySelector("#holdingPersonName_pan").value = holdingPersonName;
            panForm.querySelector(`#gender_${gender}`).checked = true;
            panForm.querySelector("#panAddress").value = address;

            const [day, month, year] = DOB.split('/');
            panForm.querySelector("#DOB_pan").value = `${year}-${month}-${day}`;

            currentEditItem = item;
        };

        const viewItem = (event) => {
            const item = event.target.closest(".item");
            const documentNumber = item.querySelector("div:nth-child(3)").textContent.trim();
            const holdingPersonName = item.querySelector("div:nth-child(4)").textContent.trim();
            const genderSymbol = item.querySelector("div:nth-child(5)").textContent.trim();
            const DOB = item.querySelector("div:nth-child(6)").textContent.trim();
            const address = item.getAttribute("data-address").trim();

            generateImage(documentNumber, holdingPersonName, genderSymbol, DOB, address);
        };

        const generateImage = (documentNumber, holdingPersonName, genderSymbol, DOB, address) => {
            let canvasWidth = 400;
            let canvasHeight = 300;

            if (canvas && context) {
                canvas.width = canvasWidth;
                canvas.height = canvasHeight;

                context.fillStyle = '#87CEEB'; 
                context.fillRect(0, 0, canvas.width, canvas.height);

                context.fillStyle = '#8B0000'; 
                context.font = 'bold 22px Arial';
                context.textAlign = 'center';

                context.fillText('--PAN Card--', canvasWidth / 2, 50);

                context.textAlign = 'left';

                const details = [
                    { label: 'Number:', value: documentNumber },
                    { label: 'Name:', value: holdingPersonName },
                    { label: 'Gender:', value: genderSymbol === String.fromCharCode(0x2642) ? "Male" : "Female" },
                    { label: 'Dateofbirth:', value: DOB },
                    { label: 'Address:', value: address },
                ];

                const startX = 40;
                let startY = 100;
                const lineHeight = 30;
                const labelValueGap = 10; 

                details.forEach((detail, index) => {
                    context.fillStyle = '#FF0000';
                    context.font = 'bold 16px Arial';
                    context.fillText(detail.label, startX, startY + index * lineHeight);

                    context.fillStyle = '#333';
                    context.font = 'bold 14px Arial';
                    context.fillText(detail.value, startX + 100 + labelValueGap, startY + index * lineHeight); 
                });

                canvasContainer.style.display = 'block';
                downloadButton.style.display = 'block';

                downloadButton.onclick = () => {
                    const dataURL = canvas.toDataURL('image/png');
                    const link = document.createElement('a');
                    link.href = dataURL;
                    link.download = 'pan_card.png';
                    link.click();

                    canvasContainer.style.display = 'none';
                    downloadButton.style.display = 'none';
                };
            }
        };

        const formatDate = (dateString) => {
            const [year, month, day] = dateString.split('-');
            return `${day}/${month}/${year}`;
        };

        saveButton.addEventListener("click", handleSubmit);
        resetButton.addEventListener("click", resetForm);
        container.addEventListener("click", (event) => {
            if (event.target.classList.contains("delete-btn")) {
                deleteItem(event);
            } else if (event.target.classList.contains("edit-btn")) {
                editItem(event);
            } else if (event.target.classList.contains("view-btn")) {
                viewItem(event);
            }
        });
    </script>
</MainLayout>