---
import MainLayout from "../layouts/MainLayout.astro";
import Nav from "../components/Nav.astro";
import Tabel from "../components/Tabel.astro";
import Gen from "../components/Gen.astro";
import Button from "../components/Button.astro";
---

<MainLayout>
  <nav slot="nav">
    <Nav />
  </nav>
  <div class="heading"><p>Please enter the details in the below form
    <p class="subheading">all feilds are required</p>
   </p>

  <section>
    <form class="form" id="license" name="license">
        <div class="Container__dl">
          <div class="form__field">
            <label for="doc-number" > License Number</label>
            <input
              type="text"
              id="doc-number"
              name="documentNumber"
              placeholder="D123 4567 8901 234"
              required
            />
          </div>
          <div class="form__field">
            <label for="doc-name"> Name on license</label>
            <input
              type="text"
              id="doc-name"
              name="holdingPersonName"
              placeholder="ZEN RAYN"
              required
            />
          </div>
          <div class="form__field">
            <label for="doc-dob">Date of Birth</label>
            <input type="date" id="doc-dob" name="DOB" required />
          </div>
          <div class="form__field">
            <label for="DOE_dl">Date of Expiry</label>
            <input type="date" id="DOE_dl" name="DOE" required />
          </div>
          <Gen/>
      </div>
    </form>
    <Button/>
  </section>
  <Tabel />
  <div id="canvasContainer" class="canvas" style="display: none;">
    <canvas id="dlCanvas"></canvas>
    <button id="downloadButton" class="download" style="display: none;">Download Image</button>
  </div>
</MainLayout>



<script is:inline>
  const dlForm = document.getElementById("license");
  const saveButton = document.querySelector(".saveButton");
  const resetButton = document.querySelector(".resetButton");
  const container = document.querySelector(".container");
  const canvasContainer = document.getElementById("canvasContainer");
  const downloadButton = document.getElementById("downloadButton");
  const canvas = document.getElementById("dlCanvas");
  const context = canvas ? canvas.getContext("2d") : null;
  let entryCount = 0;
  let currentEditItem = null;

  if (!context) {
    console.error("Canvas context could not be obtained.");
  } else {
    const handleSubmit = (event) => {
      event.preventDefault();
      const formData = new FormData(dlForm);
      const documentNumber = formData.get("documentNumber")?.trim();
      const holdingPersonName = formData.get("holdingPersonName")?.trim();
      const DOB = formData.get("DOB")?.trim();
      const gender = formData.get("gender");
      const DOE = formData.get("DOE")?.trim();

      if (documentNumber && holdingPersonName && DOB) {
        if (currentEditItem) {
          updateEntry(
            currentEditItem,
            documentNumber,
            holdingPersonName,
            DOB,
            gender,
            DOE
          );
        } else {
          createNewEntry(documentNumber, holdingPersonName, DOB, gender, DOE);
        }
        resetForm();
      } else {
        console.log("Please fill in all required fields.");
      }
    };

    const createNewEntry = (
      documentNumber,
      holdingPersonName,
      DOB,
      gender,
      DOE
    ) => {
      entryCount++;
      const maleSymbol = String.fromCharCode(0x2642);
      const femaleSymbol = String.fromCharCode(0x2640);
      const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

      container.insertAdjacentHTML(
        "beforeend",
        `
                    <div class="item" data-entry-id="${entryCount}" data-DOE="${DOE}">
                        <div>${entryCount}</div>
                        <div>License</div>
                        <div>${documentNumber}</div>
                        <div>${holdingPersonName}</div>
                        <div>${genderSymbol}</div>
                        <div>${formatDate(DOB)}</div>
                        <div>
                            <button class="view-btn" type="button">View</button>
                            <button class="edit-btn" type="button">Edit</button>
                            <button class="delete-btn" type="button">Delete</button>
                        </div>
                    </div>
                `
      );
    };

    const updateEntry = (
      item,
      documentNumber,
      holdingPersonName,
      DOB,
      gender,
      DOE
    ) => {
      const maleSymbol = String.fromCharCode(0x2642);
      const femaleSymbol = String.fromCharCode(0x2640);
      const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

      item.querySelector("div:nth-child(3)").textContent = documentNumber;
      item.querySelector("div:nth-child(4)").textContent = holdingPersonName;
      item.querySelector("div:nth-child(5)").textContent = genderSymbol;
      item.querySelector("div:nth-child(6)").textContent = formatDate(DOB);
      item.setAttribute("data-DOE", DOE);

      currentEditItem = null;
    };

    const resetForm = () => {
      dlForm.reset();
      currentEditItem = null;
    };

    const deleteItem = (event) => {
      const item = event.target.closest(".item");
      item.remove();
    };

    const editItem = (event) => {
      const item = event.target.closest(".item");
      const documentNumber = item
        .querySelector("div:nth-child(3)")
        .textContent.trim();
      const holdingPersonName = item
        .querySelector("div:nth-child(4)")
        .textContent.trim();
      const genderSymbol = item
        .querySelector("div:nth-child(5)")
        .textContent.trim();
      const DOB = item.querySelector("div:nth-child(6)").textContent.trim();
      const DOE = item.getAttribute("data-DOE").trim();

      const maleSymbol = String.fromCharCode(0x2642);
      const gender = genderSymbol === maleSymbol ? "male" : "female";

      dlForm.querySelector("#doc-number").value = documentNumber;
      dlForm.querySelector("#doc-name").value = holdingPersonName;
      dlForm.querySelector("#doc-dob").value = convertToDateInputFormat(DOB);
      dlForm.querySelector(`#gender_${gender}`).checked = true;
      dlForm.querySelector("#DOE_dl").value = DOE;

      currentEditItem = item;
    };

    const viewItem = (event) => {
      const item = event.target.closest(".item");
      const documentNumber = item
        .querySelector("div:nth-child(3)")
        .textContent.trim();
      const holdingPersonName = item
        .querySelector("div:nth-child(4)")
        .textContent.trim();
      const genderSymbol = item
        .querySelector("div:nth-child(5)")
        .textContent.trim();
      const DOB = item.querySelector("div:nth-child(6)").textContent.trim();
      const DOE = item.getAttribute("data-DOE").trim();

      generateImage(documentNumber, holdingPersonName, genderSymbol, DOB, DOE);
    };

    const generateImage = (
      documentNumber,
      holdingPersonName,
      genderSymbol,
      DOB,
      DOE
    ) => {
      let canvasWidth = 400;
      let canvasHeight = 300;

      canvas.width = canvasWidth;
      canvas.height = canvasHeight;

      context.fillStyle = "#90EE90";
      context.fillRect(0, 0, canvas.width, canvas.height);

      context.fillStyle = "#8B0000";
      context.font = "bold 22px Arial";
      context.textAlign = "center";

      context.fillText("--DL Card--", canvasWidth / 2, 50);

      context.textAlign = "left";

      const details = [
        { label: "Dl-id:", value: documentNumber },
        { label: "Name:", value: holdingPersonName },
        {
          label: "Gender:",
          value:
            genderSymbol === String.fromCharCode(0x2642) ? "Male" : "Female",
        },
        { label: "DOB:", value: DOB },
        { label: "DOE:", value: DOE },
      ];

      const startX = 40;
      let startY = 100;
      const lineHeight = 30;
      const labelValueGap = 10;

      details.forEach((detail, index) => {
        context.fillStyle = "#333";
        context.font = "bold 16px Arial";
        context.fillText(detail.label, startX, startY + index * lineHeight);

        context.fillStyle = "#333";
        context.font = "bold 14px Arial";
        context.fillText(
          detail.value,
          startX + 80 + labelValueGap,
          startY + index * lineHeight
        );
      });

      canvasContainer.style.display = "block";
      downloadButton.style.display = "block";

      downloadButton.onclick = () => {
        const imageURL = canvas.toDataURL("image/png");
        const link = document.createElement("a");
        link.href = imageURL;
        link.download = `DL_${new Date().getTime()}.png`;
        link.click();

        canvasContainer.style.display = "none";
        downloadButton.style.display = "none";
      };
    };

    const formatDate = (date) => {
      if (!date) return "";
      const [year, month, day] = date.split("-");
      return `${day}/${month}/${year}`;
    };

    const convertToDateInputFormat = (date) => {
      if (!date) return "";
      const [day, month, year] = date.split("/");
      return `${year}-${month}-${day}`;
    };

    if (resetButton) {
      resetButton.addEventListener("click", resetForm);
    } else {
      console.error("Reset button not found");
    }

    if (saveButton) {
      saveButton.addEventListener("click", handleSubmit);
    } else {
      console.error("Save button not found");
    }

    container.addEventListener("click", (event) => {
      if (event.target.classList.contains("delete-btn")) {
        deleteItem(event);
      } else if (event.target.classList.contains("edit-btn")) {
        editItem(event);
      } else if (event.target.classList.contains("view-btn")) {
        viewItem(event);
      }
    });
    const navItems = document.querySelectorAll('.nav-item');
    

    const activeTabId = localStorage.getItem('activeTabId');
    if (activeTabId) {
      document.getElementById(activeTabId)?.classList.add('active');
    }

    navItems.forEach(item => {
      item.addEventListener('click', () => {
        
        navItems.forEach(nav => nav.classList.remove('active'));
        
        
        item.classList.add('active');
        
        
        localStorage.setItem('activeTabId', item.id);
      });
    });
  }
</script>
