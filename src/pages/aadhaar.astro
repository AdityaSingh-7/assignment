---
import MainLayout from "../layouts/MainLayout.astro";
import Heading from "../components/Heading.astro";
import Tabel from "../components/Tabel.astro";
import ButtonGroup from "../components/ButtonGroup.astro";
import FormLayout from "../layouts/FormLayout.astro";

const fields = [
  {
    id: "doc-number",
    label: "Aadhaar Number",
    type: "text",
    name: "documentNumber",
    placeholder: "1234 5678 9012",
    pattern: "[0-9]{12}",
    required: true,
  },
  {
    id: "doc-name",
    label: "Name on Aadhaar",
    type: "text",
    name: "holdingPersonName",
    placeholder: "RAM SINGH",
    required: true,
  },
  {
    id: "doc-dob",
    label: "Date of Birth",
    type: "date",
    name: "DOB",
    required: true,
  },
  {
    id: "doc-address",
    label: "Aadhaar Address",
    type: "textarea",
    name: "aadhaaraddress",
    placeholder: "as per aadhaar",
    required: true,
  },
];
const inlineStyle = `
  background-color: antiquewhite;
`;

const buttonList = [
  { name: "reset", class: "reset__button", type: "button" },
  { name: "save", class: "save__button", type: "submit" },
];
const headerList = ["Document", "Info", "Name", "Gender", "DOB", "Actions"];
---

<MainLayout>
  <Heading
    headingText="Please enter the details in the below form"
    subheadingText="all fields are required"
  />
  <section>
    <FormLayout
      formId="aadhaar"
      formName="aadhaar"
      fields={fields}
      genderLabel="Gender"
      style={inlineStyle}
    />
    <ButtonGroup group={buttonList} />
  </section>
  <Tabel list={headerList} />
  <div id="canvasContainer" class="canvas" style="display: none;">
    <canvas id="aadhaarCanvas"></canvas>
    <button id="downloadButton" class="download" style="display: none;"
      >Download Image</button
    >
  </div>
</MainLayout>
<script is:inline type="module">
  console.log("Script is running");
  import { generateImage } from "../scripts/image.js";
  import {
    formatDate,
    convertToDateInputFormat,
    deleteItem,
    handleSubmit as formHandleSubmit,
    resetForm as resetform,
    populateForm,
    generateImageData,
    loadEntriesFromStorage,
  } from "../scripts/formHandlers.js";

  // Capture all form inputs and buttons
  const aadhaarForm = document.getElementById("aadhaar");
  console.log("aadhaarForm:", aadhaarForm);

  if (!aadhaarForm) {
    console.error("aadhaarForm not found.");
  } else {
    console.log("aadhaarForm found.");

    const saveButton = document.querySelector(".save__button");
    console.log("saveButton:", saveButton);

    const resetButton = document.querySelector(".reset__button");
    console.log("resetButton:", resetButton);

    const container = document.querySelector(".container");
    console.log("container:", container);

    const canvas = document.getElementById("aadhaarCanvas");
    console.log("canvas:", canvas);

    const context = canvas ? canvas.getContext("2d") : null;
    let currentEditItem = null;

    if (!context) {
      console.error("Canvas context could not be obtained.");
    } else {
      console.log("Canvas context obtained successfully.");

      // Handle form submission
      const handleSubmit = async (event) => {
        event.preventDefault();
        console.log("Handle submit function triggered.");

        // Logging all form input values before submission
        const inputs = aadhaarForm.querySelectorAll("input, textarea");
        inputs.forEach((input) => console.log(`${input.name}: ${input.value}`));

        // Handle form data submission locally
        formHandleSubmit(event, aadhaarForm, currentEditItem, container, {
          type: "Aadhaar",
          additionalFields: ["aadhaaraddress"],
        });
        console.log("Form submission handled locally.");

        // Prepare form data for server
        const formData = new FormData(aadhaarForm);
        const formObject = Object.fromEntries(formData.entries());

        // Log collected form data
        console.log("Collected Form Data:", formObject);

        try {
          console.log("Attempting to save data to the server...");
          const response = await fetch("/api/save", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formObject),
          });

          if (response.ok) {
            console.log("Data saved successfully!");
          } else {
            console.error("Failed to save data.");
          }
        } catch (error) {
          console.error("Error saving data:", error);
        }
      };

      // Load entries from server when the page loads
      loadEntriesFromStorage(container, "Aadhaar", ["aadhaaraddress"]);
      console.log("Entries loaded from storage.");

      const resetForm = () => {
        resetform(aadhaarForm);
        currentEditItem = null;
        console.log("Form reset.");
      };

      const editItem = (event) => {
        const item = event.target.closest(".item");
        console.log("Editing item:", item);

        const data = [
          { id: "doc-number", value: item.dataset.documentNumber },
          { id: "doc-name", value: item.dataset.holdingPersonName },
          { id: "gender", value: item.dataset.gender },
          { id: "doc-dob", value: formatDate(item.dataset.dob) },
          {
            id: "doc-address",
            value: item.dataset.aadhaaraddress,
            hideInTable: true,
          },
        ];

        populateForm("aadhaar", data);
        currentEditItem = item;
        console.log("Form populated with item data.");
      };

      const viewItem = (event) => {
        const item = event.target.closest(".item");
        console.log("Viewing item:", item);

        const aadhaarDetail = {
          number: item.dataset.documentNumber,
          name: item.dataset.holdingPersonName,
          gender: item.dataset.gender === "male" ? "♂" : "♀",
          dob: item.dataset.dob,
          address: item.dataset.aadhaaraddress,
        };

        const data = generateImageData("aadhaar", aadhaarDetail);

        generateImage({
          title: "--Aadhaar--",
          data,
          canvas,
          canvasContainer: document.getElementById("canvasContainer"),
          downloadButton: document.getElementById("downloadButton"),
          backgroundColor: "#D8BFD8",
          borderColor: "#FFC0CB",
        });
        console.log("Generated image for viewing item.");
      };

      // Add Event Listeners
      if (resetButton) {
        resetButton.addEventListener("click", resetForm);
      } else {
        console.error("resetButton not found.");
      }

      if (saveButton) {
        saveButton.addEventListener("click", handleSubmit);
      } else {
        console.error("saveButton not found.");
      }

      if (container) {
        container.addEventListener("click", (event) => {
          if (event.target.classList.contains("delete__btn")) {
            deleteItem(event);
          } else if (event.target.classList.contains("edit__btn")) {
            editItem(event);
          } else if (event.target.classList.contains("view__btn")) {
            viewItem(event);
          }
        });
      } else {
        console.error("container not found.");
      }

      console.log("Event listeners added.");
    }
  }
</script>
