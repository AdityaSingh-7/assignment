---
import MainLayout from "../layouts/MainLayout.astro";
import Heading from "../components/Heading.astro";
import Tabel from "../components/Tabel.astro";
import ButtonGroup from "../components/ButtonGroup.astro";
import FormLayout from "../layouts/FormLayout.astro";
import { PAN_FIELDS } from "../utils/constant";

const inlineStyle = `

`;
const buttonList = [
  { name: "reset", class: "reset__button", type: "button" },
  { name: "save", class: "save__button", type: "submit" },
];
const headerList = ["Document", "Info", "Name", "Gender", "DOB", "Actions"];
---

<MainLayout>
  <Heading
    headingText="Please enter the details in the below form"
    subheadingText="all fields are required"
  />
  <section>
    <FormLayout formId="panForm" formName="panForm" fields={PAN_FIELDS} />
    <ButtonGroup group={buttonList} />
  </section>
  <Tabel list={headerList} />
</MainLayout>
<div id="canvasContainer" class="canvas" style="display: none;">
  <canvas id="panCanvas"></canvas>
  <button id="downloadButton" class="download" style="display: none;"
    >Download Image</button
  >
</div>

<script is:inline type="module">
  import { generateImage } from "/scripts/image.js";
  import {
    formatDate,
    convertToDateInputFormat,
    deleteItem,
    handleSubmit as formHandleSubmit,
    resetForm as resetform,
  } from "/scripts/formHandlers.js";

  const panForm = document.querySelector("#panForm");
  const saveButton = document.querySelector(".save__button");
  const resetButton = document.querySelector(".reset__button");
  const container = document.querySelector(".container");
  const canvas = document.getElementById("panCanvas");
  const context = canvas ? canvas.getContext("2d") : null;
  let currentEditItem = null;

  if (!context) {
    console.error("Canvas context could not be obtained.");
  } else {
    const handleSubmit = (event) => {
      formHandleSubmit(event, panForm, currentEditItem, container, {
        type: "Pan",
        additionalFields: ["fathername"],
      });
      currentEditItem = null;
    };

    const resetForm = () => {
      resetform(panForm);
      currentEditItem = null;
    };

    const editItem = (event) => {
      const item = event.target.closest(".item");

      const documentNumber = item.dataset.documentNumber;
      const holdingPersonName = item.dataset.holdingPersonName;
      const gender = item.dataset.gender;
      const DOB = item.dataset.dob;
      const fathername = item.dataset.fathername;

      panForm.querySelector("#doc-number").value = documentNumber;
      panForm.querySelector("#doc-name").value = holdingPersonName;
      panForm.querySelector("#doc-dob").value = convertToDateInputFormat(DOB);
      panForm.querySelector(`#gender_${gender}`).checked = true;
      panForm.querySelector("#doc-fathername").value = fathername;

      currentEditItem = item;
    };

    const viewItem = (event) => {
      const item = event.target.closest(".item");

      const pan_detail = {
        number: item.dataset.documentNumber,
        name: item.dataset.holdingPersonName,
        gender: item.dataset.gender === "male" ? "♂" : "♀",
        dob: item.dataset.dob,
        fathername: item.dataset.fathername,
      };

      generatePanImage(pan_detail);
    };

    const buildDetail = ({ type, detail }) => {
      const details = [
        { label: "PAN:", value: detail.number },
        { label: "Name:", value: detail.name },
        {
          label: "Gender:",
          value: detail.gender === "♂" ? "Male" : "Female",
        },
        { label: "Date of birth:", value: detail.dob },
        { label: "Father Name:", value: detail.fathername },
      ];
      return { [type]: details };
    };

    const generatePanImage = (pan_detail) => {
      const data = buildDetail({ type: "pan", detail: pan_detail });

      generateImage({
        title: "--PAN Card--",
        data,
        canvas: document.getElementById("panCanvas"),
        canvasContainer: document.getElementById("canvasContainer"),
        downloadButton: document.getElementById("downloadButton"),
        backgroundColor: "#87CEEB",
        borderColor: "#7DF9FF",
      });
    };
    resetButton.addEventListener("click", resetForm);
    saveButton.addEventListener("click", handleSubmit);
    container.addEventListener("click", (event) => {
      if (event.target.classList.contains("delete__btn")) {
        deleteItem(event);
      } else if (event.target.classList.contains("edit__btn")) {
        editItem(event);
      } else if (event.target.classList.contains("view__btn")) {
        viewItem(event);
      }
    });
  }
</script>
