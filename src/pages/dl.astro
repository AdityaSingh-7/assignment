---
import MainLayout from "../layouts/MainLayout.astro";
import Nav from "../components/Nav.astro";
import Tabel from "../components/Tabel.astro";
import Button from "../components/ButtonGroup.astro";
import FormLayout from "../layouts/FormLayout.astro";
import ButtonGroup from "../components/ButtonGroup.astro";

const fields = [
  {
    id: "doc-number",
    label: "License Number",
    type: "text",
    name: "documentNumber",
    placeholder: "D123 4567 8901 234",
    required: true,
  },
  {
    id: "doc-name",
    label: "Name on License",
    type: "text",
    name: "holdingPersonName",
    placeholder: "ZEN RAYN",
    required: true,
  },
  {
    id: "doc-dob",
    label: "Date of Birth",
    type: "date",
    name: "DOB",
    required: true,
  },
  {
    id: "DOE_dl",
    label: "Date of Expiry",
    type: "date",
    name: "DOE",
    required: true,
  },
];
const inlineStyle = `
   background-color: rgb(215, 250, 216);
`;
const buttonList = [
  { name: "reset", class: "reset__button", type: "button" },
  { name: "save", class: "save__button", type: "submit" },
];
---

<MainLayout>
  <nav slot="nav">
    <Nav />
  </nav>
  <div class="heading">
    <p>
      Please enter the details in the below form
      <span class="subheading">all fields are required</span>
    </p>

    <section>
      <FormLayout
        formId="license"
        formName="license"
        fields={fields}
        genderLabel="Gender"
        style={inlineStyle}
      />
      <ButtonGroup group={buttonList} />
    </section>
    <Tabel />
    <div id="canvasContainer" class="canvas" style="display: none;">
      <canvas id="dlCanvas"></canvas>
      <button id="downloadButton" class="download" style="display: none;"
        >Download Image</button
      >
    </div>
  </div>
</MainLayout>

<script is:inline type="module">
  import { generateImage } from "/scripts/image.js";
  import {
    formatDate,
    convertToDateInputFormat,
    deleteItem,
    navLinks,
    handleSubmit as formHandleSubmit,
    createNewEntry as formCreateNewEntry,
    updateEntry as formUpdateEntry,
    resetForm as formResetForm,
  } from "/scripts/formHandlers.js";

  const dlForm = document.getElementById("license");
  const saveButton = document.querySelector(".save__button");
  const resetButton = document.querySelector(".reset__button");
  const container = document.querySelector(".container");
  const canvas = document.getElementById("dlCanvas");
  const context = canvas ? canvas.getContext("2d") : null;
  let currentEditItem = null;

  if (!context) {
    console.error("Canvas context could not be obtained.");
  } else {
    const handleSubmit = (event) => {
      formHandleSubmit(event, dlForm, currentEditItem, container, {
        type: "License",
        additionalFields: ["DOE"],
      });
      currentEditItem = null;
    };
    const resetForm = () => {
      formResetForm(dlForm);
      currentEditItem = null;
    };
    const editItem = (event) => {
      const item = event.target.closest(".item");

      const documentNumber = item.dataset.documentNumber;
      const holdingPersonName = item.dataset.holdingPersonName;
      const gender = item.dataset.gender;
      const DOB = item.dataset.dob;
      const DOE = item.dataset.doe;

      dlForm.querySelector("#doc-number").value = documentNumber;
      dlForm.querySelector("#doc-name").value = holdingPersonName;
      dlForm.querySelector("#doc-dob").value = convertToDateInputFormat(DOB);
      dlForm.querySelector(`#gender_${gender}`).checked = true;
      dlForm.querySelector("#DOE_dl").value = DOE;

      currentEditItem = item;
    };

    const viewItem = (event) => {
      const item = event.target.closest(".item");

      const dl_detail = {
        number: item.dataset.documentNumber,
        name: item.dataset.holdingPersonName,
        gender: item.dataset.gender === "male" ? "♂" : "♀",
        dob: item.dataset.dob,
        doe: item.dataset.doe,
      };

      generateDLImage(dl_detail);
    };

    const buildDetail = ({ type, detail }) => {
      const details = [
        { label: "Number:", value: detail.number },
        { label: "Name:", value: detail.name },
        {
          label: "Gender:",
          value: detail.gender === "♂" ? "Male" : "Female",
        },
        { label: "DOB:", value: detail.dob },
        { label: "DOE:", value: detail.doe },
      ];
      return { [type]: details };
    };

    const generateDLImage = (dl_detail) => {
      const data = buildDetail({ type: "dl", detail: dl_detail });
      console.log({ data });
      generateImage({
        title: "--License--",
        data,
        canvas: document.getElementById("dlCanvas"),
        canvasContainer: document.getElementById("canvasContainer"),
        downloadButton: document.getElementById("downloadButton"),
        backgroundColor: "#b5fdeb",
        borderColor: "#808000",
      });
    };

    if (resetButton) {
      resetButton.addEventListener("click", resetForm);
    } else {
      console.error("Reset button not found");
    }

    if (saveButton) {
      saveButton.addEventListener("click", handleSubmit);
    } else {
      console.error("Save button not found");
    }

    container.addEventListener("click", (event) => {
      if (event.target.classList.contains("delete__btn")) {
        deleteItem(event);
      } else if (event.target.classList.contains("edit__btn")) {
        editItem(event);
      } else if (event.target.classList.contains("view__btn")) {
        viewItem(event);
      }
    });
  }
</script>
